---
interface Props {
  leaderName?: string;
  workName?: string;
  careerName?: string;
}

const { leaderName, workName, careerName } = Astro.props;

// Remove current url path and remove trailing slash if exists
const currentUrlPath = Astro.url.pathname.replace(/\/+$/, "");

// Get url array from path
// eg: /tags/tailwindcss => ['tags', 'tailwindcss']
const breadcrumbList = currentUrlPath.split("/").slice(1);

// Replace 'leaders' with 'about' in the breadcrumb path
if (breadcrumbList[0] === "leaders") {
  breadcrumbList[0] = "about";
  if (breadcrumbList[1] && leaderName) {
    // Split the name into first and last name, capitalize first letter of each
    breadcrumbList[1] = leaderName
      .split(" ")
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(" ");
  }
}

// Handle client/work items: map 'work' route to 'clients'
if (
  (breadcrumbList[0] === "work" || breadcrumbList[0] === "clients") &&
  breadcrumbList[1] &&
  workName
) {
  breadcrumbList[0] = "clients";
  breadcrumbList[1] = workName;
}

// Handle career items
if (breadcrumbList[0] === "careers" && breadcrumbList[1] && careerName) {
  breadcrumbList[1] = careerName
    .split(" ")
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(" ");
}

// if breadcrumb is Home > Posts > 1 <etc>
// replace Posts with Posts (page number)
breadcrumbList[0] === "posts" &&
  breadcrumbList.splice(0, 2, `Posts (page ${breadcrumbList[1] || 1})`);

// if breadcrumb is Home > Tags > [tag] > [page] <etc>
// replace [tag] > [page] with [tag] (page number)
breadcrumbList[0] === "tags" &&
  !isNaN(Number(breadcrumbList[2])) &&
  breadcrumbList.splice(
    1,
    3,
    `${breadcrumbList[1]} ${
      Number(breadcrumbList[2]) === 1 ? "" : "(page " + breadcrumbList[2] + ")"
    }`
  );
---

<nav
  class="mx-auto mt-[112px] mb-1 w-full max-w-[960px] px-4"
  aria-label="breadcrumb"
>
  <ul>
    <li class="inline">
      <a href="/" class="capitalize opacity-70 hover:opacity-100">Home</a>
      <span class="opacity-70" aria-hidden="true">&raquo;</span>
    </li>
    {
      breadcrumbList.map((breadcrumb, index) =>
        index + 1 === breadcrumbList.length ? (
          <li class="inline">
            <span
              class={`${
                (breadcrumbList[0] === "about" && index === 1) ||
                (breadcrumbList[0] === "work" && index === 1) ||
                (breadcrumbList[0] === "careers" && index === 1)
                  ? ""
                  : index > 0
                    ? "lowercase"
                    : "capitalize"
              } opacity-70`}
              aria-current="page"
            >
              {/* make the last part lowercase in Home > Tags > some-tag */}
              {decodeURIComponent(breadcrumb)}
            </span>
          </li>
        ) : (
          <li class="inline">
            <a
              href={`/${
                // If on leader page, make the parent "about" link point to leadership anchor
                breadcrumbList[0] === "about" && index === 0
                  ? "about/#leadership"
                  : breadcrumb + "/"
              }`}
              class="capitalize opacity-70 hover:opacity-100"
            >
              {breadcrumb}
            </a>
            <span class="opacity-70" aria-hidden="true">
              &raquo;
            </span>
          </li>
        )
      )
    }
  </ul>
</nav>
