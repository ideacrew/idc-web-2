---
import { Image } from "astro:assets";
import Breadcrumbs from "@/components/Breadcrumbs.astro";
import Footer from "@/components/Footer.astro";
import Header from "@/components/Header.astro";
import Layout from "./Layout.astro";
import placeholderImage from "../assets/images/about-us.svg";
import Cta from "@/components/Cta.astro";
import type { CollectionEntry } from "astro:content";

import { getEntry } from "astro:content";
import { Card } from "@/components/ui/card";
const siteConfig = await getEntry("site", "config");
const SITE = siteConfig!.data;

interface Props {
  frontmatter: {
    title: string;
    challenge?: string;
    solution?: string;
  };
  work: CollectionEntry<"work">;
}

// Dynamic image imports with type
const images = import.meta.glob<{ default: ImageMetadata }>(
  [
    "../assets/images/work/*.{jpeg,jpg,png,gif,svg}",
    "../assets/images/clients/*.{jpeg,jpg,png,gif,svg}",
    "../assets/images/clients/awards/*.{jpeg,jpg,png,gif,svg}",
    "../assets/images/*.{jpeg,jpg,png,gif,svg}",
  ],
  { eager: true }
);

// Function with type safety
const getImageFromPath = (path: string): ImageMetadata => {
  // Remove the leading slash if it exists
  const cleanPath = path.startsWith("/") ? path.slice(1) : path;

  // Try different possible paths
  const possiblePaths = [
    `../assets/${cleanPath}`,
    `../assets/images/work/${cleanPath.split("/").pop()}`,
    `../assets/images/clients/${cleanPath.split("/").pop()}`,
    `../assets/images/clients/awards/${cleanPath.split("/").pop()}`,
    `../assets/images/${cleanPath.split("/").pop()}`,
  ];

  // Find the first matching image
  for (const tryPath of possiblePaths) {
    if (images[tryPath]) {
      return images[tryPath].default;
    }
  }

  // Return placeholder if no match found
  return placeholderImage;
};

const { frontmatter, work } = Astro.props;
---

<Layout
  title={`${work.data.title} | ${SITE.siteName}`}
  description={work.data.description}
>
  <Header activeNav="clients" />

  <Breadcrumbs workName={work.data.title} />

  <main id="main-content">
    <article class="mx-auto max-w-[960px] px-4 py-16">
      <div class="mb-8 flex flex-col md:flex-row md:space-x-8">
        <div class="mb-6 w-full place-items-center md:mb-0 md:w-1/2">
          <Image
            src={getImageFromPath(work.data.image.src)}
            alt={work.data.image.alt}
            width={460}
            height={306}
            class="rounded-lg"
          />
        </div>
        <div class="flex-1">
          <h1 class="font-domine mb-2 text-3xl font-normal text-[#0D2B46]">
            {work.data.title}
          </h1>
          <p class="mb-4 text-xl text-[#666]">{work.data.client}</p>
          <p class="text-lg text-[#0D2B46]">{work.data.description}</p>
        </div>
      </div>

      <div class="prose max-w-none">
        <div
          class="challenge-solution mb-16 border-b border-gray-200 pt-16 pb-16 md:mb-8 md:pb-0"
        >
          <div class="challenge">
            <div class="flex flex-col gap-6 md:flex-row md:gap-12">
              <h2
                class="mb-0 text-2xl font-bold text-[#0D2B46] md:mt-6 md:w-32 md:flex-shrink-0"
              >
                Challenge
              </h2>
              <div class="flex-1">
                <p
                  class="mt-0 text-base leading-relaxed text-gray-700 md:mt-6 md:text-lg md:text-gray-800"
                >
                  {work.data.challenge}
                </p>
              </div>
            </div>
          </div>
          <div class="solution">
            <div class="flex flex-col gap-6 md:flex-row md:gap-12">
              <h2
                class="mb-0 text-2xl font-bold text-[#0D2B46] md:mt-6 md:w-32 md:flex-shrink-0"
              >
                Solution
              </h2>
              <div class="flex-1">
                <p
                  class="mt-0 text-base leading-relaxed text-gray-700 md:mt-6 md:text-lg md:text-gray-800"
                >
                  {work.data.solution}
                </p>
              </div>
            </div>
          </div>
        </div>
        <slot />

        {
          work.data.awards && work.data.awards.length > 0 && (
            <div class="awards">
              <h2 class="text-2xl font-bold text-[#0D2B46]">Awards</h2>
              <div class="grid grid-cols-1 gap-4 md:grid-cols-3">
                {work.data.awards.map((award, index) => (
                  <Card
                    className="flex flex-col items-center justify-center bg-white p-4"
                    variant="leadership"
                  >
                    <Image
                      src={getImageFromPath(award.img.src)}
                      alt={award.img.alt}
                      width={100}
                      height={100}
                    />
                    <h3 class="text-base font-bold">{award.name}</h3>
                    <p class="text-sm">{award.details}</p>
                  </Card>
                ))}
              </div>
            </div>
          )
        }
      </div>
    </article>
  </main>

  <div class="mt-auto">
    <Cta />
    <Footer />
  </div>
</Layout>
