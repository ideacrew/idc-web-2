---
import Breadcrumbs from "@/components/Breadcrumbs.astro";
import Footer from "@/components/Footer.astro";
import Header from "@/components/Header.astro";
import Layout from "./Layout.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import type { ImageMetadata } from "astro";
import TeamPhotoDialog from "@/components/TeamPhotoDialog";

// Import default hero image as fallback
import defaultHeroImage from "@/assets/images/teamwork.svg";

import { getEntry } from "astro:content";
const siteConfig = await getEntry("site", "config");
const SITE = siteConfig!.data;

export interface Props {
  frontmatter: {
    seo: {
      title: string;
      description: string;
    };
    hero: {
      heading: string;
      description: string;
    };
    benefits: {
      heading: string;
      items: {
        title: string;
        description: string;
      }[];
    };
    positions: {
      heading: string;
      items: {
        title: string;
        type: string;
        location: string;
        description: string;
        link: string;
      }[];
    };
    teamPhotos: {
      heading: string;
      photos: {
        image: string;
        alt: string;
      }[];
    };
  };
}

const { frontmatter } = Astro.props;

// Get all available images from assets
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/images/**/*.{png,jpg,jpeg,svg}"
);

// Fetch active job postings
const activeJobs = await getCollection("careers", ({ data }) => {
  return data.active === true;
});

// Sort jobs by sortOrder and title
const sortedJobs = activeJobs.sort((a, b) => {
  if (a.data.sortOrder === b.data.sortOrder) {
    return a.data.title.localeCompare(b.data.title);
  }
  return a.data.sortOrder - b.data.sortOrder;
});

// Get all team image entries for rendering
const teamPhotoEntries = await Promise.all(
  frontmatter.teamPhotos.photos.map(async photo => {
    try {
      const imageModule = await images[photo.image]();
      return {
        filename: photo.image.split("/").pop() || "",
        image: imageModule.default,
        alt: photo.alt,
      };
    } catch (error) {
      console.error(`Failed to load image: ${photo.image}`);
      return null;
    }
  })
).then(entries =>
  entries.filter((entry): entry is NonNullable<typeof entry> => entry !== null)
);
---

<Layout
  title={`${frontmatter.seo.title} | ${SITE.siteName}`}
  description={frontmatter.seo.description || SITE.description}
>
  <Header />
  <Breadcrumbs />
  <main id="main-content">
    <section class="w-full min-w-full">
      <div class="mx-auto w-full max-w-[960px] px-4 py-16">
        <div class="grid grid-cols-1 gap-6 sm:grid-cols-3">
          <div class="col-span-2">
            <div
              class="mb-3 font-sans text-[18px] font-normal leading-[200%] text-[#0D2B46]"
            >
              <h1
                class="mb-6 font-domine text-[36px] font-normal leading-normal text-[#0D2B46]"
              >
                {frontmatter.hero.heading}
              </h1>
              <div
                class="font-sans text-[14px] font-normal leading-[200%] text-[#0D2B46]"
              >
                {frontmatter.hero.description}
              </div>
            </div>
          </div>

          <div class="col-span-1 grid place-items-center">
            <Image
              src="/src/assets/images/teamwork.svg"
              alt="Team collaboration illustration"
              width={300}
              height={192}
              loading="eager"
            />
          </div>
        </div>

        <div class="mb-16">
          <h2 class="mb-8 font-domine text-[24px] font-normal text-[#0D2B46]">
            {frontmatter.benefits.heading}
          </h2>
          <div class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
            {
              frontmatter.benefits.items.map(benefit => (
                <div class="space-y-2">
                  <h3 class="font-bold text-[#0D2B46]">{benefit.title}</h3>
                  <p class="text-[#666]">{benefit.description}</p>
                </div>
              ))
            }
          </div>
        </div>

        <div>
          <h2 class="mb-8 font-domine text-[24px] font-normal text-[#0D2B46]">
            {frontmatter.positions.heading}
          </h2>
          <div class="space-y-6">
            {
              sortedJobs.map(job => (
                <div class="rounded-lg border border-gray-200 p-6">
                  <div class="mb-4 flex items-center justify-between">
                    <div>
                      <h3 class="font-bold text-[#0D2B46]">{job.data.title}</h3>
                      <p class="text-sm text-[#666]">
                        {job.data.type} · {job.data.location} ·{" "}
                        {job.data.department}
                      </p>
                    </div>
                    <a
                      href={`/careers/${job.slug}`}
                      class="rounded-md bg-[#0D2B46] px-4 py-2 text-white hover:bg-[#0D2B46]/90"
                    >
                      Details
                    </a>
                  </div>
                  <p class="text-[#666]">{job.data.description}</p>
                </div>
              ))
            }
          </div>
        </div>

        {
          frontmatter.teamPhotos && teamPhotoEntries.length > 0 && (
            <div class="mt-16">
              <h2 class="mb-8 font-domine text-[24px] font-normal text-[#0D2B46]">
                {frontmatter.teamPhotos.heading}
              </h2>
              <div class="grid grid-cols-2 gap-4 sm:grid-cols-4">
                {teamPhotoEntries.map(({ filename, image, alt }) => (
                  <TeamPhotoDialog
                    image={image}
                    alt={alt}
                    width={600}
                    height={600}
                    client:load
                  />
                ))}
              </div>
            </div>
          )
        }
      </div>
    </section>
  </main>
  <Footer />
</Layout>
